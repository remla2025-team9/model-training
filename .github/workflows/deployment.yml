# This GitHub Actions workflow automates the deployment of a sentiment analysis model.
name: Deployment

# This workflow is triggered manually via the GitHub UI, allowing users to specify the release level.
on:
  workflow_dispatch:
    inputs:
      bump_level:
        description: 'Release level for the stable version (patch, minor, major)'
        required: false
        type: choice 
        options:   
        - patch
        - minor
        - major
        default: patch

permissions:
  contents: write
  packages: write

# Environment variables for container registry and Git configuration and AWS credentials for DVC remote storage
env:
  GIT_USER_NAME: "github-actions[bot]"
  GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-train-release:
    runs-on: ubuntu-24.04
    
    steps:
      # Check out repository with complete history to enable versioning
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Python environment with specified version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Install project dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt      # Pull data files managed by DVC from remote storage

      # Pull data files managed by DVC from remote storage
      - name: DVC pull
        run: |
          echo "Pulling DVC data..."
          dvc pull || echo "Warning: Some files missing from remote cache, will be generated by pipeline"
          echo "DVC pull completed."
      
      # Execute DVC pipeline to train the model and push results back to remote
      - name: Run DVC pipeline
        run: |
          echo "Running DVC pipeline..."
          dvc repro
          echo "DVC pipeline completed."
          dvc push

          echo "MODEL_FILE_PATH=models/model.joblib" >> $GITHUB_ENV
          echo "VECTORIZER_FILE_PATH=vectorizers/vectorizer.joblib" >> $GITHUB_ENV
      
      # Upload trained model as GitHub Actions artifact for CI record keeping
      - name: Upload Model Artifact (for CI records)
        uses: actions/upload-artifact@v4
        with:
          name: model-${{ steps.tag_version.outputs.new_tag }}
          path: ${{ env.MODEL_FILE_PATH }}

      # Upload vectorizer as GitHub Actions artifact for CI record keeping
      - name: Upload Vectorizer Artifact (for CI records)
        uses: actions/upload-artifact@v4
        with:
          name: vectorizer-${{ steps.tag_version.outputs.new_tag }}
          path: ${{ env.VECTORIZER_FILE_PATH }}

      # Upload model evaluation metrics as GitHub Actions artifact
      - name: Upload Metrics Artifact (for CI records)
        uses: actions/upload-artifact@v4
        with:
          name: evaluation-metrics-${{ steps.tag_version.outputs.new_tag }}
          path: reports/evaluation_metrics.json


      # Sets up Git identity for automated commits
      - name: Configure Git
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"
          git remote set-url origin git@github.com:${{ github.repository }}.git

      # Sets up SSH for pushing changes to the repository to bypass branch protection rules
      - name: Setup SSH for pushing
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_PRIVATE }}
      
      # Creates an empty commit to mark the stable release
      - name: Create stable release commit
        run: |
          git commit --allow-empty -m "Stable release commit triggered by GitHub deployment action [skip ci]"
          git push

      # Create a new version tag based on the specified bump level
      - name: Bump stable version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          default_bump: ${{ github.event.inputs.bump_level }}  
          tag_prefix: v

      # Create a GitHub release with the new model, vectorizer, and evaluation metrics
      - name: Create GitHub Stable Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: "Release ${{ steps.tag_version.outputs.new_tag }}"
          files: |
            ${{ env.MODEL_FILE_PATH }}
            ${{ env.VECTORIZER_FILE_PATH }}
            reports/evaluation_metrics.json
          prerelease: false # This is a stable release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Creates an empty commit to start the next development cycle
      - name: Create next pre-release commit
        run: |
          git commit --allow-empty -m "New pre-release commit triggered by GitHub deployment action [skip ci]"
          git push

      # Automatically increment to next prerelease version for ongoing development
      - name: Bump patch and add pre tag
        id: bump_patch
        if: github.ref == 'refs/heads/main'
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: '_NONE_'
          pre_release_branches: main
          default_prerelease_bump: prerelease      
          append_to_pre_release_tag: pre        
          tag_prefix: v
          default_bump: patch